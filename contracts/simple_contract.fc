#include "imports/stdlib.fc";

const int min_tons_for_storage = 1000000000;

;; update smc,
;; transfer
;; deposit 
;; owner withdraw 
;; change owner

(int, int, slice) load_data() inline_ref {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32),
        ds~load_uint(256),
        ds~load_msg_addr()
    );
}

() store_data(int value, int public_key, slice owner_address) impure inline {
    set_data(
        begin_cell()
        .store_uint(value, 32)
        .store_uint(public_key, 256)
        .store_slice(owner_address)
        .end_cell()
    );
}

;; int get_smc_balance() method_id {
;;     [balance, _] = get_balance();
;;     return balance;
;; }

int get_value() method_id {
    (int value, _, _) = load_data();
    return value;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    if(in_msg_body.slice_empty?()) {
        return ();
    }

    int op = in_msg_body~load_uint(32);
    (int value, int public_key, slice owner_address) = load_data();

    if(op == "set_value"c) {
        store_data(in_msg_body~load_uint(32), public_key, in_msg_body~load_msg_addr());
        return ();
    }

    return ();
}

;; () recv_external(slice in_msg) impure {
;;     return in_msg;
;; }



